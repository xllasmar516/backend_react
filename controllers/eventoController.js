// Importar libreria para respuestas
const Respuesta = require("../utils/respuesta");
const { logMensaje } = require("../utils/logger.js");
// Recuperar función de inicialización de modelos
const initModels = require("../models/init-models.js").initModels;
// Crear la instancia de sequelize con la conexión a la base de datos
const sequelize = require("../config/sequelize.js");

// Cargar las definiciones del modelo en sequelize
const models = initModels(sequelize);
// Recuperar el modelo plato
const Evento = models.eventos;
const Participante = models.participantes;

class EventoController {
  async getAllEventos(req, res) {
    try {
      const data = await Evento.findAll(); // Recuperar todos los platos
      res.json(Respuesta.exito(data, "Datos de eventos recuperados"));
    } catch (err) {
      // Handle errors during the model call
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al recuperar los datos de los eventos: ${req.originalUrl}`
          )
        );
    }
  }
  async getDataGraficaEventos(req, res) {
    try {
      const data = await Evento.findAll({
        attributes: [
          "evento_id",
          "evento_nombre",
          [sequelize.fn("COUNT", sequelize.col('participantes.participante_id')), 'total_participantes'],
        ],
        include: [
          {
            model: Participante,
            as: "participantes",
            attributes: [], // No queremos columnas de participantes, solo contar
          },
        ],
        group: ["eventos.evento_id", "eventos.evento_nombre"],
      }); 
      res.json(Respuesta.exito(data, "Datos de eventos recuperados"));
    } catch (err) {
      // Handle errors during the model call
      console.log(err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al recuperar los datos de los eventos: ${req.originalUrl}`
          )
        );
    }
  }
}

module.exports = new EventoController();

// Structure of result (MySQL)
// {
//   fieldCount: 0,
//   affectedRows: 1, // Number of rows affected by the query
//   insertId: 1,     // ID generated by the insertion operation
//   serverStatus: 2,
//   warningCount: 0,
//   message: '',
//   protocol41: true,
//   changedRows: 0   // Number of rows changed by the query
// }
