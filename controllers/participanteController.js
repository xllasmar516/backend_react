  // Importar libreria para respuestas
  const Respuesta = require("../utils/respuesta");
  const { logMensaje } = require("../utils/logger.js");
  // Recuperar función de inicialización de modelos
  const initModels = require("../models/init-models.js").initModels;
  // Crear la instancia de sequelize con la conexión a la base de datos
  const sequelize = require("../config/sequelize.js");

  // Cargar las definiciones del modelo en sequelize
  const models = initModels(sequelize);
  // Recuperar el modelo participante
  const Participante = models.participantes;
  const Evento = models.eventos;

  class ParticipanteController {
    async createParticipante(req, res) {
      // Implementa la lógica para crear un nuevo participante
      const participante = req.body;

      try {
        const participanteNuevo = await Participante.create(participante);

        res.status(201).json(Respuesta.exito(participanteNuevo, "Participante insertado"));
      } catch (err) {
        logMensaje("Error :" + err);
        res
          .status(500)
          .json(Respuesta.error(null, `Error al crear un participante nuevo: ${participante}`));
      }
    }

  async getAllParticipantes(req, res) {
    try {
      const data = await Participante.findAll(
        {include: [
          {
            model: Evento,
            as: "evento",
            attributes: ["evento_nombre"], // Traemos el nombre del evento
          },
        ],}
      ); // Recuperar todos los eventos
      res.json(Respuesta.exito(data, "Datos de participantes recuperados"));
    } catch (err) {
      // Handle errors during the model call
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al recuperar los datos de los participantes: ${req.originalUrl}`
          )
        );
    }
  }

  async deleteParticipante(req, res) {
    const idparticipante = req.params.idparticipante;
    try {
      const numFilas = await Participante.destroy({
        where: {
          participante_id: idparticipante,
        },
      });
      if (numFilas == 0) {
        // No se ha encontrado lo que se quería borrar
        res
          .status(404)
          .json(Respuesta.error(null, "No encontrado: " + idparticipante));
      } else {
        res.status(204).send();
      }
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al eliminar los datos: ${req.originalUrl}`
          )
        );
    }
  }

  async getParticipanteById(req, res) {
    // El id participante viene en la ruta /api/participantes/:idparticipante
    const idparticipante = req.params.idparticipante;
    try {
      const fila = await Participante.findByPk(idparticipante);
      if (fila) {
        // Si se ha recuprado un participante
        res.json(Respuesta.exito(fila, "Participante recuperado"));
      } else {
        res.status(404).json(Respuesta.error(null, "Participante no encontrado"));
      }
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al recuperar los datos: ${req.originalUrl}`
          )
        );
    }
  }

  async updateParticipante(req, res) {
    const participante = req.body; // Recuperamos datos para actualizar
    const idparticipante = req.params.idparticipante; // dato de la ruta

    // Petición errónea, no coincide el id del participante de la ruta con el del objeto a actualizar
    if (idparticipante != participante.participante_id) {
      return res
        .status(400)
        .json(Respuesta.error(null, "El id del participante no coincide"));
    }

    try {
      const numFilas = await Participante.update({ ...participante }, { where: { participante_id: idparticipante } });

      if (numFilas == 0) {
        // No se ha encontrado lo que se quería actualizar o no hay nada que cambiar
        res
          .status(404)
          .json(Respuesta.error(null, "No encontrado o no modificado: " + idparticipante));
      } else {
        // Al dar status 204 no se devuelva nada
        // res.status(204).json(Respuesta.exito(null, "Participante actualizado"));
        res.status(204).send();
      }
    } catch (err) {
      logMensaje("Error :" + err);
      res
        .status(500)
        .json(
          Respuesta.error(
            null,
            `Error al actualizar los datos: ${req.originalUrl}`
          )
        );
    }
  }
}

module.exports = new ParticipanteController();

// Structure of result (MySQL)
// {
//   fieldCount: 0,
//   affectedRows: 1, // Number of rows affected by the query
//   insertId: 1,     // ID generated by the insertion operation
//   serverStatus: 2,
//   warningCount: 0,
//   message: '',
//   protocol41: true,
//   changedRows: 0   // Number of rows changed by the query
// }
